import Head from 'next/head'
import Prismic from '@prismicio/client'
import { GetStaticProps } from 'next'
import { ReactElement, useState } from 'react'
import { RichText } from 'prismic-dom'
import Link from 'next/link'

import { getPrismicCLient } from '../../services/prismic'

import styles from './styles.module.scss'
import { FiCalendar, FiUser, FiClock } from 'react-icons/fi';

type Post = {
  slug: string;
  uid?: string;
  title: string;
  subtitle: string;
  content: string;
  updatedAt: string;
  image: {
    url: string;
    alt: string;
  };
  author: string;
}

interface PostsProps {
  posts: Post[];
}

interface PostPagination {
  next_page: string;
  results: Post[];
}
interface HomeProps {
  postsPagination: PostPagination;
  preview: boolean;
}

export default function Noticias({
  postsPagination,
  preview,
}: HomeProps): ReactElement {
  const [posts, setPosts] = useState(postsPagination.results);
  const [nextPage, setNextPage] = useState(postsPagination.next_page);
  const [currentPage, setCurrentPage] = useState(1);

  async function handleNextPage(): Promise<void> {
    if (currentPage != 1 && nextPage === null) {
      return
    }
    const postsResults = await fetch(`${nextPage}`)
      .then(response => response.json())

    setNextPage(postsResults.next_page)
    setCurrentPage(postsResults.page)

    const newPosts = postsResults.results.map(post => {
      return {
        slug: post.uid,
        title: RichText.asText(post.data.title),
        subtitle: RichText.asText(post.data.subtitle),
        content: RichText.asHtml(post.data.content),
        updatedAt: new Date(post.last_publication_date).toLocaleDateString('pt-BR', {
          day: '2-digit',
          month: 'long',
          year: 'numeric'
        }),
        image: post.data.image,
        author: post.data.author,
      }
    })

    setPosts([...posts, ...newPosts]);
  }



  return (
    <>
      <Head>
        <title> Notícias | Exploit </title>
      </Head>

      <main className={styles.container}>
        <div className={styles.news}>
          {posts.map((post) => (
            <Link href={`/noticias/${post.slug}`} key={post.slug}>
              <a className={styles.newsContent}>
                <img src={`${post.image.url}`} alt="" />
                <div>
                  <strong>{post.title}</strong>
                  <ul>
                    <li>
                      <FiCalendar />
                      <time>{post.updatedAt}</time>
                    </li>
                    <li>
                      <FiUser />
                      {post.author}
                    </li>
                    <li>
                      <FiClock />
                      {`${Math.ceil(post.content.split(' ').length / 200)} min de leitura`}
                    </li>
                  </ul>
                  <p>{post.subtitle}</p>
                </div>
              </a>
            </Link>
          ))}
          {nextPage && (
            <button type="button" onClick={handleNextPage}>
              Carregar mais Notícias
            </button>
          )}
        </div>
      </main>
    </>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const prismic = getPrismicCLient()

  const response = await prismic.query([
    Prismic.predicates.at('document.type', 'news')
  ], {
    fetch: ['news.title', 'news.content', 'news.image', 'news.author', 'news.subtitle', 'news.content'],
    pageSize: 5,
  })

  const posts = response.results.map(post => {
    return {
      slug: post.uid,
      title: RichText.asText(post.data.title),
      subtitle: RichText.asText(post.data.subtitle),
      content: RichText.asHtml(post.data.content),
      updatedAt: new Date(post.last_publication_date).toLocaleDateString('pt-BR', {
        day: '2-digit',
        month: 'long',
        year: 'numeric'
      }),
      image: post.data.image,
      author: post.data.author,
    }
  })

  const postsPagination = {
    next_page: response.next_page,
    results: posts,
  };

  return {
    props: {
      postsPagination,
    },
    revalidate: 60 * 60 * 24,
  }
}
