import { GetServerSideProps, GetStaticPaths } from "next"
import { getPrismicCLient } from "../../services/prismic";


import { RichText } from "prismic-dom";
import Prismic from '@prismicio/client';
import Link from 'next/link'


import { FiCalendar, FiUser, FiClock } from 'react-icons/fi';


import Head from 'next/head'

type Post = {
  data: {
    content: string;
  }
}
interface PostProps {
  post: {
    Post: Post;
    uid: string;
    title: string;
    content: string;
    author: string;
    updatedAt: string;
    image: {
      url: string;
      alt: string;
    };
  }
  navigation: {
    prevPost: {
      uid: string;
      data: {
        title: string;
      };
    }[];
    nextPost: {
      uid: string;
      data: {
        title: string;
      };
    }[];
  };
}

import styles from './news.module.scss'

export default function Post({ post, navigation }: PostProps): JSX.Element {

  const totalCharacters = post.content.split(' ').length;

  const readTime = Math.ceil(totalCharacters / 200);

  console.log(navigation)

  return (
    <>
      <Head>
        <title>{post.title} | Exploit</title>
      </Head>

      <main className={styles.container}>
        <article className={styles.post}>
          <img src={`${post.image.url}`} alt={`${post.image.alt}`} />
          <h1>{post.title}</h1>
          <div className={styles.dataAuthor}>
            <ul>
              <li>
                <FiCalendar />
                {post.updatedAt}
              </li>
              <li>
                <FiUser />
                {post.author}
              </li>
              <li>
                <FiClock />
                {readTime} min de leitura
              </li>
            </ul>
          </div>
          <div
            className={styles.postContent}
            dangerouslySetInnerHTML={{ __html: post.content }}
          />
        </article>

        <section className={styles.navigation}>
          {navigation?.prevPost.length > 0 && (
            <div>
              <Link href={`/noticias/${navigation.prevPost[0].uid}`}>
                <a>Próxima notícia</a>
              </Link>
            </div>
          )}

          {navigation?.nextPost.length > 0 && (
            <div>
              <Link href={`/noticias/${navigation.nextPost[0].uid}`}>
                <a>Notícia anterior</a>

              </Link>
            </div>
          )}
        </section>
      </main>
    </>
  )
}


export const getServerSideProps: GetServerSideProps = async ({ req, params }) => {
  const { slug } = params
  const prismic = getPrismicCLient(req)
  const response = await prismic.getByUID('news', String(slug), {})

  console.log(response)

  const prevPost = await prismic.query(
    [Prismic.Predicates.at('document.type', 'news')],
    {
      pageSize: 1,
      after: response.id,
      orderings: '[document.first_publication_date]'
    }
  )

  const nextPost = await prismic.query(
    [Prismic.Predicates.at('document.type', 'news')],
    {
      pageSize: 1,
      after: response.id,
      orderings: '[document.last_publication_date desc]',
    }
  );

  const post = {
    uid: response?.uid,
    title: RichText.asText(response.data.title),
    author: response.data.author,
    content: RichText.asHtml(response.data.content),
    updatedAt: new Date(response.last_publication_date).toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: 'long',
      year: 'numeric'
    }),
    image: response.data.image,
    alt: response.data.image.alt,
  }
  console.log(post.content)

  return {
    props: {
      post,
      navigation: {
        prevPost: prevPost?.results,
        nextPost: nextPost?.results,
      },
      revalidate: 60 * 60 * 24 // 1 day
    }
  }
}
